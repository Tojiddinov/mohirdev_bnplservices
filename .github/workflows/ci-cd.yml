name: BNPL Service CI/CD Pipeline (Free Tier)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
    
    - name: Run tests
      env:
        DEBUG: True
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
      run: |
        python manage.py collectstatic --noinput
        python manage.py test --verbosity=2 --parallel
    
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          bandit-report.json
          safety-report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t bnpl-service:${{ github.sha }} .
        docker build -t bnpl-service:latest .
    
    - name: Log in to Docker Hub (Optional - only if you have credentials)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME || 'dummy' }}
        password: ${{ secrets.DOCKER_PASSWORD || 'dummy' }}
    
    - name: Push Docker image (Optional - only if you have credentials)
      run: |
        echo "Docker image built successfully: bnpl-service:${{ github.sha }}"
        echo "Docker image built successfully: bnpl-service:latest"
        echo ""
        echo "Note: To push to Docker Hub, set DOCKER_USERNAME and DOCKER_PASSWORD secrets"
        echo "Current workflow builds the image but doesn't push (free tier friendly)"

  deploy-simulation:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Simulate deployment to staging
      run: |
        echo "🎯 Simulating deployment to staging environment..."
        echo "✅ All tests passed"
        echo "✅ Docker image built successfully"
        echo "🚀 Ready for deployment to staging"
        echo ""
        echo "📋 Deployment commands would be:"
        echo "  docker-compose -f docker-compose.prod.yml up -d"
        echo "  kubectl apply -f k8s/deployment.yaml"
    
    - name: Simulate deployment to production
      run: |
        echo "🎯 Simulating deployment to production environment..."
        echo "✅ Staging deployment simulation completed"
        echo "🚀 Ready for production deployment"
        echo ""
        echo "📋 Production deployment commands would be:"
        echo "  docker-compose -f docker-compose.prod.yml up -d"
        echo "  kubectl apply -f k8s/deployment.yaml"

  notify:
    needs: [test, build, deploy-simulation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "🎉 All CI/CD stages completed successfully!"
        echo "✅ Tests passed"
        echo "✅ Build completed"
        echo "✅ Deployment simulation successful"
        echo ""
        echo "🚀 Your BNPL Service is ready for production!"
        echo "📚 API Documentation: /swagger/"
        echo "🔧 Admin Panel: /admin/"
        echo "🏠 Home Page: /"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "🔍 Check the logs above for details"
        echo "💡 Common issues:"
        echo "   - Test failures"
        echo "   - Build errors"
        echo "   - Configuration issues"
